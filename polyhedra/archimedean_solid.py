import bpy
from bpy.types import Operator, Panel
from bpy.props import FloatVectorProperty
from bpy_extras.object_utils import AddObjectHelper, object_data_add
from mathutils import Vector

################################################# 1
def add_object_cuboctahedron(self, context):

    verts = [Vector((1.0, 0.0, 1.0)), Vector((-1.0, 0.0, 1.0)), Vector((0.0, -1.0, 1.0)), Vector((0.0, 1.0, 1.0)), Vector((1.0, 1.0, 0.0)), Vector((1.0, -1.0, 0.0)), Vector((1.0, 0.0, -1.0)), Vector((0.0, 1.0, -1.0)), Vector((-1.0, 1.0, 0.0)), Vector((-1.0, 0.0, -1.0)), Vector((-1.0, -1.0, 0.0)), Vector((0.0, -1.0, -1.0))]
    edges = []
    faces = [[11, 5, 2, 10], [6, 5, 11], [10, 9, 11], [2, 5, 0], [6, 4, 0, 5], [3, 0, 4], [1, 2, 0, 3], [3, 8, 1], [2, 1, 10], [9, 10, 1, 8], [9, 7, 6, 11], [6, 7, 4], [8, 7, 9], [7, 8, 3, 4]]

    mesh = bpy.data.meshes.new(name="Cuboctahedron")
    mesh.from_pydata(verts, edges, faces)
    object_data_add(context, mesh, operator=self)

class CreateCuboctahedron(Operator, AddObjectHelper):
    
    bl_idname = "mesh.add_cuboctahedron"
    bl_label = "Cuboctahedron"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):

        add_object_cuboctahedron(self, context)
        
        return {'FINISHED'}
#################################################
#############################Икосо-Додекаэдр
def add_object_icosidodecahedron(self, context):

    verts = [Vector((0.7557612657546997, 0.28867512941360474, 0.46708619594573975)), Vector((0.46708619594573975, 0.7557612657546997, 0.28867512941360474)), Vector((0.28867512941360474, 0.46708619594573975, 0.7557612657546997)), Vector((0.7557612657546997, 0.28867512941360474, -0.46708619594573975)), Vector((0.28867512941360474, 0.46708619594573975, -0.7557612657546997)), Vector((0.46708619594573975, 0.7557612657546997, -0.28867512941360474)), Vector((0.46708619594573975, -0.7557612657546997, 0.28867512941360474)), Vector((0.7557612657546997, -0.28867512941360474, 0.46708619594573975)), Vector((0.28867512941360474, -0.46708619594573975, 0.7557612657546997)), Vector((0.7557612657546997, -0.28867512941360474, -0.46708619594573975)), Vector((0.46708619594573975, -0.7557612657546997, -0.28867512941360474)), Vector((0.28867512941360474, -0.46708619594573975, -0.7557612657546997)), Vector((-0.7557612657546997, 0.28867512941360474, 0.46708619594573975)), Vector((-0.28867512941360474, 0.46708619594573975, 0.7557612657546997)), Vector((-0.46708619594573975, 0.7557612657546997, 0.28867512941360474)), Vector((-0.28867512941360474, 0.46708619594573975, -0.7557612657546997)), Vector((-0.7557612657546997, 0.28867512941360474, -0.46708619594573975)), Vector((-0.46708619594573975, 0.7557612657546997, -0.28867512941360474)), Vector((-0.46708619594573975, -0.7557612657546997, 0.28867512941360474)), Vector((-0.28867512941360474, -0.46708619594573975, 0.7557612657546997)), Vector((-0.7557612657546997, -0.28867512941360474, 0.46708619594573975)), Vector((-0.7557612657546997, -0.28867512941360474, -0.46708619594573975)), Vector((-0.28867512941360474, -0.46708619594573975, -0.7557612657546997)), Vector((-0.46708619594573975, -0.7557612657546997, -0.28867512941360474)), Vector((0.0, 0.9341723322868347, 0.0)), Vector((0.0, -0.9341723322868347, 0.0)), Vector((0.9341723322868347, 0.0, 0.0)), Vector((-0.9341723322868347, 0.0, 0.0)), Vector((0.0, 0.0, 0.9341723322868347)), Vector((0.0, 0.0, -0.9341723322868347))]
    edges = []
    faces = [[25, 6, 8, 19, 18], [0, 26, 3, 5, 1], [24, 5, 4, 15, 17], [25, 23, 22, 11, 10], [28, 13, 12, 20, 19], [27, 21, 23, 18, 20], [9, 26, 7, 6, 10], [1, 24, 14, 13, 2], [12, 14, 17, 16, 27], [11, 29, 4, 3, 9], [16, 15, 29, 22, 21], [0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11], [12, 13, 14], [15, 16, 17], [18, 19, 20], [21, 22, 23], [24, 1, 5], [17, 14, 24], [25, 10, 6], [25, 18, 23], [0, 7, 26], [3, 26, 9], [12, 27, 20], [21, 27, 16], [28, 2, 13], [28, 19, 8], [29, 15, 4], [22, 29, 11], [28, 8, 7, 0, 2]]
    
    mesh = bpy.data.meshes.new(name="Icosidodecahedron")
    mesh.from_pydata(verts, edges, faces)
    object_data_add(context, mesh, operator=self)
    
class CreateIcosidodecahedron(Operator, AddObjectHelper):
    
    bl_idname = "mesh.add_icosidodecahedron"
    bl_label = "Icosidodecahedron"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):

        add_object_icosidodecahedron(self, context)
        
        return {'FINISHED'}      
    
#############################Курносый Додекаэдр
def add_object_snubdodecahedron(self, context):

    verts = [Vector((-0.7253033518791199, -0.5572237372398376, 1.0828189849853516)), Vector((-1.1480647325515747, -0.12681838870048523, 0.8215382695198059)), Vector((-0.37327608466148376, 0.42276132106781006, 1.3003836870193481)), Vector((-0.24645766615867615, -0.21756480634212494, 1.3787617683410645)), Vector((-0.9304998517036438, 0.47884562611579895, 0.956000566482544)), Vector((0.9560006260871887, 0.9304998517036438, -0.47884562611579895)), Vector((1.3003836870193481, 0.37327611446380615, -0.42276132106781006)), Vector((1.378761887550354, 0.24645763635635376, 0.21756480634212494)), Vector((1.0828189849853516, 0.7253033518791199, 0.5572237372398376)), Vector((0.8215382695198059, 1.1480647325515747, 0.12681841850280762)), Vector((0.21756480634212494, 1.378761887550354, 0.24645766615867615)), Vector((-0.42276132106781006, 1.3003836870193481, 0.37327611446380615)), Vector((-0.47884562611579895, 0.9560006260871887, 0.9304998517036438)), Vector((0.5572237372398376, 1.0828189849853516, 0.7253033518791199)), Vector((0.12681841850280762, 0.8215382695198059, 1.1480647325515747)), Vector((-0.5572237372398376, -1.0828189849853516, 0.7253033518791199)), Vector((-0.12681841850280762, -0.8215382695198059, 1.1480647325515747)), Vector((0.42276132106781006, -1.3003836870193481, 0.37327611446380615)), Vector((-0.21756480634212494, -1.378761887550354, 0.24645766615867615)), Vector((0.47884562611579895, -0.9560006260871887, 0.9304998517036438)), Vector((0.9304998517036438, 0.47884562611579895, -0.9560006260871887)), Vector((1.1480647325515747, -0.12681841850280762, -0.8215382695198059)), Vector((0.37327608466148376, 0.42276132106781006, -1.3003836870193481)), Vector((0.24645766615867615, -0.21756480634212494, -1.378761887550354)), Vector((0.7253033518791199, -0.5572237372398376, -1.0828189849853516)), Vector((0.42276132106781006, 1.3003836870193481, -0.37327611446380615)), Vector((-0.21756480634212494, 1.3787617683410645, -0.24645766615867615)), Vector((0.24645766615867615, 0.21756480634212494, 1.378761887550354)), Vector((0.37327608466148376, -0.42276132106781006, 1.3003836870193481)), Vector((0.7253033518791199, 0.5572237372398376, 1.0828189849853516)), Vector((0.9304998517036438, -0.47884562611579895, 0.9560006260871887)), Vector((-0.5572237372398376, 1.0828189849853516, -0.7253033518791199)), Vector((-0.12681838870048523, 0.8215382695198059, -1.1480647325515747)), Vector((1.1480647325515747, 0.12681841850280762, 0.8215382695198059)), Vector((0.47884562611579895, 0.956000566482544, -0.9304998517036438)), Vector((-1.0828189849853516, -0.7253033518791199, 0.5572237372398376)), Vector((-1.3787617683410645, -0.24645766615867615, 0.21756480634212494)), Vector((-0.956000566482544, -0.9304998517036438, -0.47884562611579895)), Vector((-1.3003836870193481, -0.37327608466148376, -0.42276132106781006)), Vector((-0.8215382695198059, -1.1480647325515747, 0.12681838870048523)), Vector((1.0828189849853516, -0.7253033518791199, -0.5572237372398376)), Vector((0.8215382695198059, -1.1480647325515747, -0.12681838870048523)), Vector((1.3003836870193481, -0.37327608466148376, 0.42276132106781006)), Vector((1.3787617683410645, -0.24645766615867615, -0.21756480634212494)), Vector((0.956000566482544, -0.9304998517036438, 0.47884562611579895)), Vector((-0.956000566482544, 0.9304998517036438, 0.47884562611579895)), Vector((-0.8215382695198059, 1.1480647325515747, -0.12681841850280762)), Vector((-0.47884562611579895, -0.956000566482544, -0.9304998517036438)), Vector((0.12681838870048523, -0.8215382695198059, -1.1480647325515747)), Vector((0.21756480634212494, -1.3787617683410645, -0.24645766615867615)), Vector((-0.42276132106781006, -1.3003836870193481, -0.37327611446380615)), Vector((0.5572237372398376, -1.0828189849853516, -0.7253033518791199)), Vector((-1.3003836870193481, 0.37327611446380615, 0.42276132106781006)), Vector((-1.3787617683410645, 0.24645763635635376, -0.21756480634212494)), Vector((-1.0828189849853516, 0.7253033518791199, -0.5572237372398376)), Vector((-0.9304998517036438, -0.47884562611579895, -0.956000566482544)), Vector((-1.1480647325515747, 0.12681838870048523, -0.8215382695198059)), Vector((-0.37327608466148376, -0.42276132106781006, -1.3003836870193481)), Vector((-0.24645766615867615, 0.21756480634212494, -1.3787617683410645)), Vector((-0.7253033518791199, 0.5572237372398376, -1.0828189849853516))]
    edges = []
    faces = [[4, 1, 0, 3, 2], [7, 6, 5, 9, 8], [10, 11, 12, 14, 13], [18, 17, 19, 16, 15], [23, 22, 20, 21, 24], [27, 28, 30, 33, 29], [34, 32, 31, 26, 25], [39, 35, 36, 38, 37], [44, 41, 40, 43, 42], [48, 51, 49, 50, 47], [54, 53, 52, 45, 46], [56, 59, 58, 57, 55], [10, 13, 9], [11, 10, 26], [26, 10, 25], [46, 11, 26], [2, 12, 4], [12, 45, 4], [45, 12, 11], [45, 11, 46], [12, 2, 14], [7, 8, 33], [33, 8, 29], [29, 8, 13], [13, 8, 9], [29, 13, 14], [29, 14, 27], [3, 0, 16], [16, 0, 15], [16, 28, 3], [28, 27, 3], [3, 27, 2], [27, 14, 2], [16, 19, 28], [28, 19, 30], [18, 49, 17], [49, 41, 17], [41, 44, 17], [49, 51, 41], [41, 51, 40], [40, 51, 24], [40, 24, 21], [49, 18, 50], [9, 5, 25], [25, 5, 34], [34, 5, 20], [20, 5, 6], [20, 6, 21], [21, 6, 43], [43, 40, 21], [25, 10, 9], [6, 7, 43], [23, 58, 22], [58, 32, 22], [32, 34, 22], [22, 34, 20], [58, 59, 32], [58, 23, 57], [57, 23, 48], [23, 24, 48], [48, 47, 57], [51, 48, 24], [18, 15, 39], [39, 15, 35], [39, 50, 18], [39, 37, 50], [50, 37, 47], [47, 37, 55], [55, 37, 38], [55, 38, 56], [56, 38, 53], [38, 36, 53], [53, 54, 56], [55, 57, 47], [1, 35, 0], [35, 15, 0], [35, 1, 36], [36, 1, 52], [52, 53, 36], [1, 4, 52], [52, 4, 45], [32, 59, 31], [59, 54, 31], [54, 46, 31], [46, 26, 31], [59, 56, 54], [17, 44, 19], [33, 30, 42], [42, 30, 44], [30, 19, 44], [33, 42, 7], [42, 43, 7]]
    mesh = bpy.data.meshes.new(name="Snub dodecahedron")
    mesh.from_pydata(verts, edges, faces)
    object_data_add(context, mesh, operator=self)

class CreateSnubDodecahedron(Operator, AddObjectHelper):
    
    bl_idname = "mesh.add_snubdodecahedron"
    bl_label = "Snub dodecahedron"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):

        add_object_snubdodecahedron(self, context)
        
        return {'FINISHED'}    

#############################Ромбо-кубо-октаэдр      
def add_object_rhombicuboctahedron(self, context):

    verts = [Vector((-0.4142000079154968, -0.4142000079154968, -1.0)), Vector((-0.4142000079154968, -1.0, -0.4142000079154968)), Vector((-1.0, -0.4142000079154968, -0.4142000079154968)), Vector((-0.4142000079154968, -1.0, 0.4142000079154968)), Vector((-0.4142000079154968, -0.4142000079154968, 1.0)), Vector((-1.0, -0.4142000079154968, 0.4142000079154968)), Vector((-0.4142000079154968, 0.4142000079154968, -1.0)), Vector((-1.0, 0.4142000079154968, -0.4142000079154968)), Vector((-0.4142000079154968, 1.0, -0.4142000079154968)), Vector((-0.4142000079154968, 0.4142000079154968, 1.0)), Vector((-0.4142000079154968, 1.0, 0.4142000079154968)), Vector((-1.0, 0.4142000079154968, 0.4142000079154968)), Vector((0.4142000079154968, -0.4142000079154968, -1.0)), Vector((1.0, -0.4142000079154968, -0.4142000079154968)), Vector((0.4142000079154968, -1.0, -0.4142000079154968)), Vector((0.4142000079154968, -0.4142000079154968, 1.0)), Vector((0.4142000079154968, -1.0, 0.4142000079154968)), Vector((1.0, -0.4142000079154968, 0.4142000079154968)), Vector((0.4142000079154968, 0.4142000079154968, -1.0)), Vector((0.4142000079154968, 1.0, -0.4142000079154968)), Vector((1.0, 0.4142000079154968, -0.4142000079154968)), Vector((0.4142000079154968, 0.4142000079154968, 1.0)), Vector((1.0, 0.4142000079154968, 0.4142000079154968)), Vector((0.4142000079154968, 1.0, 0.4142000079154968))]
    edges = []
    faces = [[14, 16, 3, 1], [20, 22, 17, 13], [21, 9, 4, 15], [2, 5, 11, 7], [8, 10, 23, 19], [0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11], [12, 13, 14], [15, 16, 17], [18, 19, 20], [21, 22, 23], [6, 0, 2, 7], [1, 3, 5, 2], [4, 9, 11, 5], [10, 8, 7, 11], [18, 6, 8, 19], [9, 21, 23, 10], [22, 20, 19, 23], [12, 18, 20, 13], [21, 15, 17, 22], [16, 14, 13, 17], [0, 12, 14, 1], [15, 4, 3, 16], [6, 18, 12, 0]]
    mesh = bpy.data.meshes.new(name="Rhombicuboctahedron")
    mesh.from_pydata(verts, edges, faces)
    object_data_add(context, mesh, operator=self)

class CreateRhombicuboctahedron(Operator, AddObjectHelper):
    
    bl_idname = "mesh.add_rhombicuboctahedron"
    bl_label = "Rhombicuboctahedron"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):

        add_object_rhombicuboctahedron(self, context)
        
        return {'FINISHED'}   
############################# Ромбо-усеченный-кубо-октаэдр   
def add_object_truncated_cuboctahedron(self, context):

    verts = [Vector((-0.9999673366546631, -0.4142000079154968, 1.5857672691345215)), Vector((-1.5857672691345215, -0.4142000079154968, 0.9999673366546631)), Vector((-1.5857672691345215, 0.4142000079154968, 0.9999673366546631)), Vector((-0.9999673366546631, 0.4142000079154968, 1.5857672691345215)), Vector((-0.4142000079154968, -1.5857672691345215, 0.9999673366546631)), Vector((-0.4142000079154968, -0.9999673366546631, 1.5857672691345215)), Vector((0.4142000079154968, -0.9999673366546631, 1.5857672691345215)), Vector((0.4142000079154968, -1.5857672691345215, 0.9999673366546631)), Vector((1.5857672691345215, -0.4142000079154968, 0.9999673366546631)), Vector((0.9999673366546631, -0.4142000079154968, 1.5857672691345215)), Vector((0.9999673366546631, 0.4142000079154968, 1.5857672691345215)), Vector((1.5857672691345215, 0.4142000079154968, 0.9999673366546631)), Vector((-0.4142000079154968, 0.9999673366546631, 1.5857672691345215)), Vector((-0.4142000079154968, 1.5857672691345215, 0.9999673366546631)), Vector((0.4142000079154968, 1.5857672691345215, 0.9999673366546631)), Vector((0.4142000079154968, 0.9999673366546631, 1.5857672691345215)), Vector((-1.5857672691345215, 0.9999673366546631, -0.4142000079154968)), Vector((-0.9999673366546631, 1.5857672691345215, -0.4142000079154968)), Vector((-0.9999673366546631, 1.5857672691345215, 0.4142000079154968)), Vector((-1.5857672691345215, 0.9999673366546631, 0.4142000079154968)), Vector((-0.9999673366546631, -1.5857672691345215, -0.4142000079154968)), Vector((-1.5857672691345215, -0.9999673366546631, -0.4142000079154968)), Vector((-1.5857672691345215, -0.9999673366546631, 0.4142000079154968)), Vector((-0.9999673366546631, -1.5857672691345215, 0.4142000079154968)), Vector((1.5857672691345215, -0.9999673366546631, -0.4142000079154968)), Vector((0.9999673366546631, -1.5857672691345215, -0.4142000079154968)), Vector((0.9999673366546631, -1.5857672691345215, 0.4142000079154968)), Vector((1.5857672691345215, -0.9999673366546631, 0.4142000079154968)), Vector((0.9999673366546631, 1.5857672691345215, -0.4142000079154968)), Vector((1.5857672691345215, 0.9999673366546631, -0.4142000079154968)), Vector((1.5857672691345215, 0.9999673366546631, 0.4142000079154968)), Vector((0.9999673366546631, 1.5857672691345215, 0.4142000079154968)), Vector((-0.4142000079154968, 1.5857672691345215, -0.9999673366546631)), Vector((-0.4142000079154968, 0.9999673366546631, -1.5857672691345215)), Vector((0.4142000079154968, 0.9999673366546631, -1.5857672691345215)), Vector((0.4142000079154968, 1.5857672691345215, -0.9999673366546631)), Vector((-1.5857672691345215, -0.4142000079154968, -0.9999673366546631)), Vector((-0.9999673366546631, -0.4142000079154968, -1.5857672691345215)), Vector((-0.9999673366546631, 0.4142000079154968, -1.5857672691345215)), Vector((-1.5857672691345215, 0.4142000079154968, -0.9999673366546631)), Vector((-0.4142000079154968, -0.9999673366546631, -1.5857672691345215)), Vector((-0.4142000079154968, -1.5857672691345215, -0.9999673366546631)), Vector((0.4142000079154968, -1.5857672691345215, -0.9999673366546631)), Vector((0.4142000079154968, -0.9999673366546631, -1.5857672691345215)), Vector((0.9999673366546631, -0.4142000079154968, -1.5857672691345215)), Vector((1.5857672691345215, -0.4142000079154968, -0.9999673366546631)), Vector((1.5857672691345215, 0.4142000079154968, -0.9999673366546631)), Vector((0.9999673366546631, 0.4142000079154968, -1.5857672691345215))]
    edges = []
    faces = [[0, 5, 6, 9, 10, 15, 12, 3], [24, 25, 42, 43, 44, 45], [16, 17, 32, 33, 38, 39], [0, 3, 2, 1], [34, 47, 44, 43, 40, 37, 38, 33], [7, 26, 27, 8, 9, 6], [6, 5, 4, 7], [8, 27, 24, 45, 46, 29, 30, 11], [29, 46, 47, 34, 35, 28], [10, 9, 8, 11], [1, 22, 23, 4, 5, 0], [2, 19, 16, 39, 36, 21, 22, 1], [12, 15, 14, 13], [4, 23, 20, 41, 42, 25, 26, 7], [18, 17, 16, 19], [2, 3, 12, 13, 18, 19], [20, 23, 22, 21], [11, 30, 31, 14, 15, 10], [26, 25, 24, 27], [14, 31, 28, 35, 32, 17, 18, 13], [30, 29, 28, 31], [20, 21, 36, 37, 40, 41], [34, 33, 32, 35], [38, 37, 36, 39], [40, 43, 42, 41], [44, 47, 46, 45]]
    mesh = bpy.data.meshes.new(name="Truncated cuboctahedron")
    mesh.from_pydata(verts, edges, faces)
    object_data_add(context, mesh, operator=self)

class CreateTruncatedCuboctahedron(Operator, AddObjectHelper):
    
    bl_idname = "mesh.add_truncated_cuboctahedron"
    bl_label = "Truncated cuboctahedron"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):

        add_object_truncated_cuboctahedron(self, context)
        
        return {'FINISHED'}     

#############################  Ромбо-усеченный-икосо-додекаэдр 
def add_object_truncated_icosidodecahedron(self, context):

    verts = [Vector((-0.7746555209159851, 0.8355850577354431, 0.4177752137184143)), Vector((-0.934230625629425, 0.5773871541023254, 0.516398012638092)), Vector((-0.934230625629425, 0.5773871541023254, -0.516398012638092)), Vector((-0.7746555209159851, 0.8355850577354431, -0.4177752137184143)), Vector((-0.6760318875312805, 0.9951614737510681, -0.15957503020763397)), Vector((-0.6760318875312805, 0.9951614737510681, 0.15957506000995636)), Vector((-1.0938072204589844, 0.3191869854927063, 0.41777434945106506)), Vector((-1.192430019378662, 0.15961194038391113, 0.15957652032375336)), Vector((-1.192430019378662, 0.15961194038391113, -0.15957649052143097)), Vector((-1.0938072204589844, 0.3191869854927063, -0.41777434945106506)), Vector((-0.5773872137069702, 0.516398012638092, -0.9342307448387146)), Vector((-0.8355850577354431, 0.4177752137184143, -0.7746556401252747)), Vector((-0.8355850577354431, -0.4177752137184143, -0.7746556401252747)), Vector((-0.5773872137069702, -0.516398012638092, -0.9342307448387146)), Vector((-0.9951615929603577, 0.15957503020763397, -0.6760320067405701)), Vector((-0.9951615929603577, -0.15957506000995636, -0.6760320067405701)), Vector((-0.1596119999885559, 0.15957649052143097, -1.192430019378662)), Vector((-0.3191870450973511, 0.41777434945106506, -1.0938072204589844)), Vector((-0.3191870450973511, -0.41777434945106506, -1.0938072204589844)), Vector((-0.1596119999885559, -0.15957652032375336, -1.192430019378662)), Vector((0.4177752137184143, 0.7746555805206299, -0.8355849981307983)), Vector((0.516398012638092, 0.9342306852340698, -0.5773872137069702)), Vector((-0.516398012638092, 0.9342306852340698, -0.5773872137069702)), Vector((-0.4177752137184143, 0.7746555805206299, -0.8355849981307983)), Vector((0.41777434945106506, 1.0938071012496948, -0.3191870152950287)), Vector((0.15957650542259216, 1.1924299001693726, -0.15961197018623352)), Vector((-0.15957650542259216, 1.1924299001693726, -0.15961197018623352)), Vector((-0.41777434945106506, 1.0938071012496948, -0.3191870152950287)), Vector((-0.15957504510879517, 0.6760319471359253, -0.9951615333557129)), Vector((0.15957504510879517, 0.6760319471359253, -0.9951615333557129)), Vector((0.516398012638092, 0.9342306852340698, 0.5773872137069702)), Vector((0.4177752137184143, 0.7746555805206299, 0.8355850577354431)), Vector((-0.4177752137184143, 0.7746555805206299, 0.8355850577354431)), Vector((-0.516398012638092, 0.9342306852340698, 0.5773872137069702)), Vector((0.15957650542259216, 1.1924299001693726, 0.15961198508739471)), Vector((0.41777434945106506, 1.0938071012496948, 0.3191870450973511)), Vector((-0.41777434945106506, 1.0938071012496948, 0.3191870450973511)), Vector((-0.15957650542259216, 1.1924299001693726, 0.15961198508739471)), Vector((0.15957504510879517, 0.6760319471359253, 0.9951615333557129)), Vector((-0.15957504510879517, 0.6760319471359253, 0.9951615333557129)), Vector((0.9342306852340698, 0.5773872137069702, 0.516398012638092)), Vector((0.7746555805206299, 0.8355850577354431, 0.4177752137184143)), Vector((0.7746555805206299, 0.8355850577354431, -0.4177752137184143)), Vector((0.9342306852340698, 0.5773872137069702, -0.516398012638092)), Vector((0.6760319471359253, 0.9951615333557129, 0.15957504510879517)), Vector((0.6760319471359253, 0.9951615333557129, -0.15957504510879517)), Vector((1.1924299001693726, 0.15961198508739471, 0.15957650542259216)), Vector((1.0938071012496948, 0.3191870450973511, 0.41777434945106506)), Vector((1.0938071012496948, 0.3191870450973511, -0.41777434945106506)), Vector((1.1924299001693726, 0.15961198508739471, -0.15957650542259216)), Vector((0.8355850577354431, 0.4177752137184143, -0.7746555805206299)), Vector((0.5773872137069702, 0.516398012638092, -0.9342306852340698)), Vector((0.5773872137069702, -0.516398012638092, -0.9342306852340698)), Vector((0.8355850577354431, -0.4177752137184143, -0.7746555805206299)), Vector((0.9951615333557129, -0.15957504510879517, -0.6760319471359253)), Vector((0.9951615333557129, 0.15957504510879517, -0.6760319471359253)), Vector((0.3191870450973511, 0.41777434945106506, -1.0938071012496948)), Vector((0.15961198508739471, 0.15957650542259216, -1.1924299001693726)), Vector((0.15961198508739471, -0.15957650542259216, -1.1924299001693726)), Vector((0.3191870450973511, -0.41777434945106506, -1.0938071012496948)), Vector((0.7746555805206299, -0.8355849981307983, 0.4177752137184143)), Vector((0.9342306852340698, -0.5773872137069702, 0.516398012638092)), Vector((0.9342306852340698, -0.5773872137069702, -0.516398012638092)), Vector((0.7746555805206299, -0.8355849981307983, -0.4177752137184143)), Vector((0.6760319471359253, -0.9951615333557129, -0.15957504510879517)), Vector((0.6760319471359253, -0.9951615333557129, 0.15957504510879517)), Vector((1.0938071012496948, -0.3191870152950287, 0.41777434945106506)), Vector((1.1924299001693726, -0.15961197018623352, 0.15957650542259216)), Vector((1.1924299001693726, -0.15961197018623352, -0.15957650542259216)), Vector((1.0938071012496948, -0.3191870152950287, -0.41777434945106506)), Vector((0.516398012638092, -0.9342306852340698, -0.5773872137069702)), Vector((0.4177752137184143, -0.7746555805206299, -0.8355849981307983)), Vector((-0.4177752137184143, -0.7746555805206299, -0.8355849981307983)), Vector((-0.516398012638092, -0.9342306852340698, -0.5773872137069702)), Vector((0.15957650542259216, -1.1924299001693726, -0.15961197018623352)), Vector((0.41777434945106506, -1.0938071012496948, -0.3191870152950287)), Vector((-0.41777434945106506, -1.0938071012496948, -0.3191870152950287)), Vector((-0.15957650542259216, -1.1924299001693726, -0.15961197018623352)), Vector((0.15957504510879517, -0.6760319471359253, -0.9951615333557129)), Vector((-0.15957504510879517, -0.6760319471359253, -0.9951615333557129)), Vector((-0.9342306852340698, -0.5773872137069702, 0.516398012638092)), Vector((-0.7746555805206299, -0.8355849981307983, 0.4177752137184143)), Vector((-0.7746555805206299, -0.8355849981307983, -0.4177752137184143)), Vector((-0.9342306852340698, -0.5773872137069702, -0.516398012638092)), Vector((-0.6760319471359253, -0.9951615333557129, 0.15957504510879517)), Vector((-0.6760319471359253, -0.9951615333557129, -0.15957504510879517)), Vector((-1.1924299001693726, -0.15961197018623352, 0.15957650542259216)), Vector((-1.0938071012496948, -0.3191870152950287, 0.41777434945106506)), Vector((-1.0938071012496948, -0.3191870152950287, -0.41777434945106506)), Vector((-1.1924299001693726, -0.15961197018623352, -0.15957650542259216)), Vector((0.4177752137184143, -0.7746555805206299, 0.8355850577354431)), Vector((0.516398012638092, -0.9342306852340698, 0.5773872137069702)), Vector((-0.516398012638092, -0.9342306852340698, 0.5773872137069702)), Vector((-0.4177752137184143, -0.7746555805206299, 0.8355850577354431)), Vector((0.41777434945106506, -1.0938071012496948, 0.3191870450973511)), Vector((0.15957650542259216, -1.1924299001693726, 0.15961198508739471)), Vector((-0.15957650542259216, -1.1924299001693726, 0.15961198508739471)), Vector((-0.41777434945106506, -1.0938071012496948, 0.3191870450973511)), Vector((-0.15957504510879517, -0.6760319471359253, 0.9951615333557129)), Vector((0.15957504510879517, -0.6760319471359253, 0.9951615333557129)), Vector((-0.8355849981307983, 0.4177752137184143, 0.7746555805206299)), Vector((-0.5773872137069702, 0.516398012638092, 0.9342306852340698)), Vector((-0.5773872137069702, -0.516398012638092, 0.9342306852340698)), Vector((-0.8355849981307983, -0.4177752137184143, 0.7746555805206299)), Vector((-0.9951615333557129, -0.15957504510879517, 0.6760319471359253)), Vector((-0.9951615333557129, 0.15957504510879517, 0.6760319471359253)), Vector((-0.3191870152950287, 0.41777434945106506, 1.0938071012496948)), Vector((-0.15961197018623352, 0.15957650542259216, 1.1924299001693726)), Vector((-0.15961197018623352, -0.15957650542259216, 1.1924299001693726)), Vector((-0.3191870152950287, -0.41777434945106506, 1.0938071012496948)), Vector((0.5773872137069702, 0.516398012638092, 0.9342306852340698)), Vector((0.8355850577354431, 0.4177752137184143, 0.7746555805206299)), Vector((0.8355850577354431, -0.4177752137184143, 0.7746555805206299)), Vector((0.5773872137069702, -0.516398012638092, 0.9342306852340698)), Vector((0.9951615333557129, 0.15957504510879517, 0.6760319471359253)), Vector((0.9951615333557129, -0.15957504510879517, 0.6760319471359253)), Vector((0.15961198508739471, 0.15957650542259216, 1.1924299001693726)), Vector((0.3191870450973511, 0.41777434945106506, 1.0938071012496948)), Vector((0.3191870450973511, -0.41777434945106506, 1.0938071012496948)), Vector((0.15961198508739471, -0.15957650542259216, 1.1924299001693726))]
    edges = []
    faces = [[3, 2, 9, 8, 7, 6, 1, 0, 5, 4], [15, 14, 11, 10, 17, 16, 19, 18, 13, 12], [21, 20, 29, 28, 23, 22, 27, 26, 25, 24], [35, 34, 37, 36, 33, 32, 39, 38, 31, 30], [47, 46, 49, 48, 43, 42, 45, 44, 41, 40], [59, 58, 57, 56, 51, 50, 55, 54, 53, 52], [61, 60, 65, 64, 63, 62, 69, 68, 67, 66], [79, 78, 71, 70, 75, 74, 77, 76, 73, 72], [85, 84, 81, 80, 87, 86, 89, 88, 83, 82], [49, 46, 67, 68], [69, 54, 55, 48, 49, 68], [97, 96, 95, 94, 91, 90, 99, 98, 93, 92], [69, 62, 53, 54], [43, 50, 51, 20, 21, 42], [50, 43, 48, 55], [20, 51, 56, 29], [16, 57, 58, 19], [17, 28, 29, 56, 57, 16], [95, 74, 75, 64, 65, 94], [95, 96, 77, 74], [63, 70, 71, 52, 53, 62], [101, 100, 105, 104, 103, 102, 109, 108, 107, 106], [70, 63, 64, 75], [59, 78, 79, 18, 19, 58], [78, 59, 52, 71], [13, 72, 73, 82, 83, 12], [72, 13, 18, 79], [82, 73, 76, 85], [15, 88, 89, 8, 9, 14], [88, 15, 12, 83], [11, 2, 3, 22, 23, 10], [117, 116, 119, 118, 113, 112, 115, 114, 111, 110], [11, 14, 9, 2], [23, 28, 17, 10], [97, 84, 85, 76, 77, 96], [81, 92, 93, 102, 103, 80], [92, 81, 84, 97], [102, 93, 98, 109], [7, 86, 87, 104, 105, 6], [86, 7, 8, 89], [104, 87, 80, 103], [114, 47, 40, 111], [47, 114, 115, 66, 67, 46], [37, 34, 25, 26], [27, 22, 3, 4], [27, 4, 5, 36, 37, 26], [45, 42, 21, 24], [44, 35, 30, 41], [35, 44, 45, 24, 25, 34], [110, 31, 38, 117], [31, 110, 111, 40, 41, 30], [100, 1, 6, 105], [33, 36, 5, 0], [101, 106, 39, 32], [101, 32, 33, 0, 1, 100], [116, 107, 108, 119], [107, 116, 117, 38, 39, 106], [99, 118, 119, 108, 109, 98], [113, 118, 99, 90], [91, 94, 65, 60], [91, 60, 61, 112, 113, 90], [66, 115, 112, 61]]
    mesh = bpy.data.meshes.new(name="Truncated icosidodecahedron")
    mesh.from_pydata(verts, edges, faces)
    object_data_add(context, mesh, operator=self)

class CreateTruncatedIcosidodecahedron(Operator, AddObjectHelper):
    
    bl_idname = "mesh.add_truncated_icosidodecahedron"
    bl_label = "Truncated icosidodecahedron"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):

        add_object_truncated_icosidodecahedron(self, context)
        
        return {'FINISHED'}       

#############################  Ромбо-икосо-додекаэдр
def add_object_rhombicosidodecahedron(self, context):

    verts = [Vector((0.9341377019882202, -0.5773502588272095, -1.15464448928833)), Vector((0.35678741335868835, -0.35682210326194763, -1.5114665031433105)), Vector((0.35678741335868835, 0.35682210326194763, -1.5114665031433105)), Vector((1.2909597158432007, -1.985649644709042e-09, -0.9341162443161011)), Vector((0.9341377019882202, 0.5773502588272095, -1.15464448928833)), Vector((1.15464448928833, -0.9341377019882202, -0.5773502588272095)), Vector((0.9341163635253906, -1.2909597158432007, -5.7706346368036066e-09)), Vector((1.5114665031433105, -0.35678741335868835, 0.35682210326194763)), Vector((1.5114665031433105, -0.35678741335868835, -0.35682210326194763)), Vector((1.15464448928833, -0.9341377019882202, 0.5773502588272095)), Vector((-0.5773502588272095, -1.15464448928833, -0.9341377019882202)), Vector((0.0, -0.9341163635253906, -1.2909597158432007)), Vector((0.35682210326194763, -1.5114665031433105, -0.35678741335868835)), Vector((-0.35682210326194763, -1.5114665031433105, -0.35678741335868835)), Vector((0.5773502588272095, -1.15464448928833, -0.9341377019882202)), Vector((-0.5773502588272095, -1.15464448928833, 0.9341377019882202)), Vector((0.0, -0.9341163635253906, 1.2909597158432007)), Vector((0.35682210326194763, -1.5114665031433105, 0.35678741335868835)), Vector((-0.35682210326194763, -1.5114665031433105, 0.35678741335868835)), Vector((0.5773502588272095, -1.15464448928833, 0.9341377019882202)), Vector((-1.15464448928833, -0.9341377019882202, 0.5773502588272095)), Vector((-1.5114665031433105, -0.35678741335868835, 0.35682210326194763)), Vector((-1.15464448928833, -0.9341377019882202, -0.5773502588272095)), Vector((-1.5114665031433105, -0.35678741335868835, -0.35682210326194763)), Vector((-0.9341163635253906, -1.2909597158432007, 0.0)), Vector((-0.9341377019882202, -0.5773502588272095, -1.15464448928833)), Vector((-1.2909597158432007, 0.0, -0.9341163635253906)), Vector((-0.35678741335868835, -0.35682210326194763, -1.5114665031433105)), Vector((-0.35678741335868835, 0.35682210326194763, -1.5114665031433105)), Vector((-0.9341377019882202, 0.5773502588272095, -1.15464448928833)), Vector((-1.15464448928833, 0.9341377019882202, 0.5773502588272095)), Vector((-0.9341163635253906, 1.2909597158432007, 1.1541269273607213e-08)), Vector((-1.5114665031433105, 0.35678741335868835, 0.35682210326194763)), Vector((-1.5114665031433105, 0.35678741335868835, -0.35682210326194763)), Vector((-1.15464448928833, 0.9341377019882202, -0.5773502588272095)), Vector((0.35682210326194763, 1.5114665031433105, -0.35678741335868835)), Vector((-0.35682210326194763, 1.5114665031433105, -0.35678741335868835)), Vector((-0.5773502588272095, 1.15464448928833, -0.9341377019882202)), Vector((-5.7706346368036066e-09, 0.9341163635253906, -1.2909597158432007)), Vector((0.5773502588272095, 1.15464448928833, -0.9341377019882202)), Vector((1.15464448928833, 0.9341377019882202, -0.5773502588272095)), Vector((1.5114665031433105, 0.35678741335868835, -0.35682210326194763)), Vector((1.5114665031433105, 0.35678741335868835, 0.35682210326194763)), Vector((1.15464448928833, 0.9341377019882202, 0.5773502588272095)), Vector((0.9341163635253906, 1.2909597158432007, 0.0)), Vector((0.35682210326194763, 1.5114665031433105, 0.35678741335868835)), Vector((-0.35682210326194763, 1.5114665031433105, 0.35678741335868835)), Vector((-0.5773502588272095, 1.15464448928833, 0.9341377019882202)), Vector((0.5773502588272095, 1.15464448928833, 0.9341377019882202)), Vector((0.0, 0.9341163635253906, 1.2909597158432007)), Vector((0.35678741335868835, 0.35682210326194763, 1.5114665031433105)), Vector((0.35678741335868835, -0.35682210326194763, 1.5114665031433105)), Vector((0.9341377019882202, 0.5773502588272095, 1.15464448928833)), Vector((0.9341377019882202, -0.5773502588272095, 1.15464448928833)), Vector((1.2909597158432007, 0.0, 0.9341163635253906)), Vector((-0.9341377019882202, -0.5773502588272095, 1.15464448928833)), Vector((-1.2909597158432007, -5.7706346368036066e-09, 0.9341163635253906)), Vector((-0.35678741335868835, 0.35682210326194763, 1.5114665031433105)), Vector((-0.35678741335868835, -0.35682210326194763, 1.5114665031433105)), Vector((-0.9341377019882202, 0.5773502588272095, 1.15464448928833))]
    edges = []
    faces = [[4, 3, 0, 1, 2], [9, 6, 5, 8, 7], [11, 14, 12, 13, 10], [18, 17, 19, 16, 15], [24, 20, 21, 23, 22], [26, 29, 28, 27, 25], [34, 33, 32, 30, 31], [18, 15, 20, 24], [13, 24, 22, 10], [23, 26, 25, 22], [11, 10, 25, 27], [39, 38, 37, 36, 35], [48, 52, 43], [45, 44, 35], [59, 47, 30], [50, 49, 57], [42, 41, 40, 44, 43], [20, 15, 55], [51, 58, 16], [53, 19, 9], [42, 54, 7], [45, 46, 47, 49, 48], [39, 40, 4], [28, 38, 2], [36, 31, 46], [34, 37, 29], [50, 51, 53, 54, 52], [32, 21, 56], [26, 23, 33], [18, 24, 13], [25, 10, 22], [59, 56, 55, 58, 57], [11, 27, 1], [8, 3, 41], [5, 14, 0], [17, 12, 6], [6, 9, 19, 17], [7, 54, 53, 9], [8, 41, 42, 7], [42, 43, 52, 54], [44, 45, 48, 43], [36, 46, 45, 35], [35, 44, 40, 39], [31, 36, 37, 34], [31, 30, 47, 46], [49, 47, 59, 57], [49, 50, 52, 48], [51, 50, 57, 58], [16, 58, 55, 15], [16, 19, 53, 51], [6, 12, 14, 5], [13, 12, 17, 18], [1, 0, 14, 11], [3, 8, 5, 0], [3, 4, 40, 41], [2, 38, 39, 4], [28, 29, 37, 38], [1, 27, 28, 2], [26, 33, 34, 29], [23, 21, 32, 33], [32, 56, 59, 30], [21, 20, 55, 56]]
    mesh = bpy.data.meshes.new(name="Rhombicosidodecahedron")
    mesh.from_pydata(verts, edges, faces)
    object_data_add(context, mesh, operator=self)
    
class CreateRhombIcosIdodecahedron(Operator, AddObjectHelper):
    
    bl_idname = "mesh.add_rhombicosidodecahedron"
    bl_label = "Rhombicosidodecahedron"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):

        add_object_rhombicosidodecahedron(self, context)
        
        return {'FINISHED'}  
############################# Усеченный Икосаэдр
def add_object_truncated_icosahedron(self, context):

    verts = [Vector((0.7423403263092041, 0.3504810929298401, -0.28356045484542847)), Vector((0.5670903325080872, 0.6340415477752686, -0.17524999380111694)), Vector((0.5670903325080872, 0.6340415477752686, 0.17524999380111694)), Vector((0.7423403263092041, 0.3504810929298401, 0.28356045484542847)), Vector((0.8506507873535156, 0.17523109912872314, 0.0)), Vector((-0.7423403263092041, 0.3504810929298401, -0.28356045484542847)), Vector((-0.8506507873535156, 0.17523109912872314, 0.0)), Vector((-0.7423403263092041, 0.3504810929298401, 0.28356045484542847)), Vector((-0.5670903325080872, 0.6340415477752686, 0.17524999380111694)), Vector((-0.5670903325080872, 0.6340415477752686, -0.17524999380111694)), Vector((0.7423403263092041, -0.3504810929298401, -0.28356045484542847)), Vector((0.8506507873535156, -0.17523109912872314, 0.0)), Vector((0.7423403263092041, -0.3504810929298401, 0.28356045484542847)), Vector((0.5670903325080872, -0.6340415477752686, 0.17524999380111694)), Vector((0.5670903325080872, -0.6340415477752686, -0.17524999380111694)), Vector((-0.8506507873535156, -0.17523109912872314, 0.0)), Vector((-0.7423403263092041, -0.3504810929298401, -0.28356045484542847)), Vector((-0.5670903325080872, -0.6340415477752686, -0.17524999380111694)), Vector((-0.5670903325080872, -0.6340415477752686, 0.17524999380111694)), Vector((-0.7423403263092041, -0.3504810929298401, 0.28356045484542847)), Vector((0.6340415477752686, -0.17524999380111694, 0.5670903325080872)), Vector((0.6340415477752686, 0.17524999380111694, 0.5670903325080872)), Vector((0.3504810929298401, 0.28356045484542847, 0.7423403263092041)), Vector((0.17523109912872314, 0.0, 0.8506507873535156)), Vector((0.3504810929298401, -0.28356045484542847, 0.7423403263092041)), Vector((0.6340415477752686, 0.17524999380111694, -0.5670903325080872)), Vector((0.6340415477752686, -0.17524999380111694, -0.5670903325080872)), Vector((0.3504810929298401, -0.28356045484542847, -0.7423403263092041)), Vector((0.17523109912872314, 0.0, -0.8506507873535156)), Vector((0.3504810929298401, 0.28356045484542847, -0.7423403263092041)), Vector((-0.6340415477752686, -0.17524999380111694, 0.5670903325080872)), Vector((-0.3504810929298401, -0.28356045484542847, 0.7423403263092041)), Vector((-0.17523109912872314, 0.0, 0.8506507873535156)), Vector((-0.3504810929298401, 0.28356045484542847, 0.7423403263092041)), Vector((-0.6340415477752686, 0.17524999380111694, 0.5670903325080872)), Vector((-0.3504810929298401, 0.28356045484542847, -0.7423403263092041)), Vector((-0.17523109912872314, 0.0, -0.8506507873535156)), Vector((-0.3504810929298401, -0.28356045484542847, -0.7423403263092041)), Vector((-0.6340415477752686, -0.17524999380111694, -0.5670903325080872)), Vector((-0.6340415477752686, 0.17524999380111694, -0.5670903325080872)), Vector((0.17524999380111694, 0.5670903325080872, 0.6340415477752686)), Vector((0.28356045484542847, 0.7423403263092041, 0.3504810929298401)), Vector((0.0, 0.8506507873535156, 0.17523109912872314)), Vector((-0.28356045484542847, 0.7423403263092041, 0.3504810929298401)), Vector((-0.17524999380111694, 0.5670903325080872, 0.6340415477752686)), Vector((0.17524999380111694, -0.5670903325080872, 0.6340415477752686)), Vector((-0.17524999380111694, -0.5670903325080872, 0.6340415477752686)), Vector((-0.28356045484542847, -0.7423403263092041, 0.3504810929298401)), Vector((0.0, -0.8506507873535156, 0.17523109912872314)), Vector((0.28356045484542847, -0.7423403263092041, 0.3504810929298401)), Vector((0.0, 0.8506507873535156, -0.17523109912872314)), Vector((0.28356045484542847, 0.7423403263092041, -0.3504810929298401)), Vector((0.17524999380111694, 0.5670903325080872, -0.6340415477752686)), Vector((-0.17524999380111694, 0.5670903325080872, -0.6340415477752686)), Vector((-0.28356045484542847, 0.7423403263092041, -0.3504810929298401)), Vector((0.17524999380111694, -0.5670903325080872, -0.6340415477752686)), Vector((0.28356045484542847, -0.7423403263092041, -0.3504810929298401)), Vector((0.0, -0.8506507873535156, -0.17523109912872314)), Vector((-0.28356045484542847, -0.7423403263092041, -0.3504810929298401)), Vector((-0.17524999380111694, -0.5670903325080872, -0.6340415477752686))]
    edges = []
    faces = [[26, 25, 0, 4, 11, 10], [2, 1, 51, 50, 42, 41], [17, 16, 38, 37, 59, 58], [14, 13, 49, 48, 57, 56], [9, 8, 43, 42, 50, 54], [30, 34, 7, 6, 15, 19], [18, 17, 58, 57, 48, 47], [19, 18, 47, 46, 31, 30], [21, 20, 12, 11, 4, 3], [39, 38, 16, 15, 6, 5], [13, 12, 20, 24, 45, 49], [46, 45, 24, 23, 32, 31], [3, 2, 41, 40, 22, 21], [5, 9, 54, 53, 35, 39], [8, 7, 34, 33, 44, 43], [10, 14, 56, 55, 27, 26], [53, 52, 29, 28, 36, 35], [40, 44, 33, 32, 23, 22], [55, 59, 37, 36, 28, 27], [0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20, 21, 22, 23, 24], [25, 26, 27, 28, 29], [30, 31, 32, 33, 34], [35, 36, 37, 38, 39], [40, 41, 42, 43, 44], [45, 46, 47, 48, 49], [50, 51, 52, 53, 54], [55, 56, 57, 58, 59], [1, 0, 25, 29, 52, 51]]
    mesh = bpy.data.meshes.new(name="Truncated icosahedron")
    mesh.from_pydata(verts, edges, faces)
    object_data_add(context, mesh, operator=self)

class CreateTruncatedIcosahedron(Operator, AddObjectHelper):
    
    bl_idname = "mesh.add_truncated_icosahedron"
    bl_label = "Truncated icosahedron"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):

        add_object_truncated_icosahedron(self, context)
        
        return {'FINISHED'}
    

############################# Усеченный Гексаэдр
def add_object_truncated_cube(self, context):

    verts = [Vector((-0.5773502588272095, -0.5773502588272095, -0.2391502559185028)), Vector((-0.5773502588272095, -0.2391502559185028, -0.5773502588272095)), Vector((-0.2391502559185028, -0.5773502588272095, -0.5773502588272095)), Vector((0.2391502559185028, -0.5773502588272095, -0.5773502588272095)), Vector((0.5773502588272095, -0.2391502559185028, -0.5773502588272095)), Vector((0.5773502588272095, -0.5773502588272095, -0.2391502559185028)), Vector((0.5773502588272095, 0.5773502588272095, -0.2391502559185028)), Vector((0.5773502588272095, 0.2391502559185028, -0.5773502588272095)), Vector((0.2391502559185028, 0.5773502588272095, -0.5773502588272095)), Vector((-0.5773502588272095, 0.5773502588272095, -0.2391502559185028)), Vector((-0.2391502559185028, 0.5773502588272095, -0.5773502588272095)), Vector((-0.5773502588272095, 0.2391502559185028, -0.5773502588272095)), Vector((-0.2391502559185028, -0.5773502588272095, 0.5773502588272095)), Vector((-0.5773502588272095, -0.2391502559185028, 0.5773502588272095)), Vector((-0.5773502588272095, -0.5773502588272095, 0.2391502559185028)), Vector((0.5773502588272095, -0.5773502588272095, 0.2391502559185028)), Vector((0.5773502588272095, -0.2391502559185028, 0.5773502588272095)), Vector((0.2391502559185028, -0.5773502588272095, 0.5773502588272095)), Vector((0.2391502559185028, 0.5773502588272095, 0.5773502588272095)), Vector((0.5773502588272095, 0.2391502559185028, 0.5773502588272095)), Vector((0.5773502588272095, 0.5773502588272095, 0.2391502559185028)), Vector((-0.2391502559185028, 0.5773502588272095, 0.5773502588272095)), Vector((-0.5773502588272095, 0.5773502588272095, 0.2391502559185028)), Vector((-0.5773502588272095, 0.2391502559185028, 0.5773502588272095))]
    edges = []
    faces = [[1, 0, 14, 13, 23, 22, 9, 11], [2, 1, 11, 10, 8, 7, 4, 3], [20, 19, 16, 15, 5, 4, 7, 6], [18, 20, 6, 8, 10, 9, 22, 21], [19, 18, 21, 23, 13, 12, 17, 16], [0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11], [12, 13, 14], [15, 16, 17], [18, 19, 20], [21, 22, 23], [0, 2, 3, 5, 15, 17, 12, 14]]
    mesh = bpy.data.meshes.new(name="Truncated cube")
    mesh.from_pydata(verts, edges, faces)
    object_data_add(context, mesh, operator=self)

    
class CreateTruncatedCube(Operator, AddObjectHelper):
    
    bl_idname = "mesh.add_truncated_cube"
    bl_label = "Truncated cube"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):

        add_object_truncated_cube(self, context)
        

        return {'FINISHED'} 
#############################Усеченный Додекаэдр
def add_object_truncated_dodecahedron(self, context):

    verts = [Vector((0.6759730577468872, 0.4177752137184143, 0.516398012638092)), Vector((0.516398012638092, 0.6759730577468872, 0.4177752137184143)), Vector((0.4177752137184143, 0.516398012638092, 0.6759730577468872)), Vector((0.6759730577468872, 0.4177752137184143, -0.516398012638092)), Vector((0.4177752137184143, 0.516398012638092, -0.6759730577468872)), Vector((0.516398012638092, 0.6759730577468872, -0.4177752137184143)), Vector((0.516398012638092, -0.6759730577468872, 0.4177752137184143)), Vector((0.6759730577468872, -0.4177752137184143, 0.516398012638092)), Vector((0.4177752137184143, -0.516398012638092, 0.6759730577468872)), Vector((0.6759730577468872, -0.4177752137184143, -0.516398012638092)), Vector((0.516398012638092, -0.6759730577468872, -0.4177752137184143)), Vector((0.4177752137184143, -0.516398012638092, -0.6759730577468872)), Vector((-0.6759730577468872, 0.4177752137184143, 0.516398012638092)), Vector((-0.4177752137184143, 0.516398012638092, 0.6759730577468872)), Vector((-0.516398012638092, 0.6759730577468872, 0.4177752137184143)), Vector((-0.4177752137184143, 0.516398012638092, -0.6759730577468872)), Vector((-0.6759730577468872, 0.4177752137184143, -0.516398012638092)), Vector((-0.516398012638092, 0.6759730577468872, -0.4177752137184143)), Vector((-0.516398012638092, -0.6759730577468872, 0.4177752137184143)), Vector((-0.4177752137184143, -0.516398012638092, 0.6759730577468872)), Vector((-0.6759730577468872, -0.4177752137184143, 0.516398012638092)), Vector((-0.6759730577468872, -0.4177752137184143, -0.516398012638092)), Vector((-0.4177752137184143, -0.516398012638092, -0.6759730577468872)), Vector((-0.516398012638092, -0.6759730577468872, -0.4177752137184143)), Vector((0.15957650542259216, 0.9341723322868347, 0.0)), Vector((0.41777434945106506, 0.835549533367157, 0.15957504510879517)), Vector((0.41777434945106506, 0.835549533367157, -0.15957504510879517)), Vector((-0.41777434945106506, 0.835549533367157, -0.15957504510879517)), Vector((-0.41777434945106506, 0.835549533367157, 0.15957504510879517)), Vector((-0.15957650542259216, 0.9341723322868347, 0.0)), Vector((0.15957650542259216, -0.9341723322868347, 0.0)), Vector((0.41777434945106506, -0.835549533367157, -0.15957504510879517)), Vector((0.41777434945106506, -0.835549533367157, 0.15957504510879517)), Vector((-0.15957650542259216, -0.9341723322868347, 0.0)), Vector((-0.41777434945106506, -0.835549533367157, 0.15957504510879517)), Vector((-0.41777434945106506, -0.835549533367157, -0.15957504510879517)), Vector((0.835549533367157, 0.15957504510879517, 0.41777434945106506)), Vector((0.835549533367157, -0.15957504510879517, 0.41777434945106506)), Vector((0.9341723322868347, 0.0, 0.15957650542259216)), Vector((0.835549533367157, 0.15957504510879517, -0.41777434945106506)), Vector((0.9341723322868347, 0.0, -0.15957650542259216)), Vector((0.835549533367157, -0.15957504510879517, -0.41777434945106506)), Vector((-0.835549533367157, 0.15957504510879517, 0.41777434945106506)), Vector((-0.9341723322868347, 0.0, 0.15957650542259216)), Vector((-0.835549533367157, -0.15957504510879517, 0.41777434945106506)), Vector((-0.835549533367157, -0.15957504510879517, -0.41777434945106506)), Vector((-0.9341723322868347, 0.0, -0.15957650542259216)), Vector((-0.835549533367157, 0.15957504510879517, -0.41777434945106506)), Vector((0.0, 0.15957650542259216, 0.9341723322868347)), Vector((0.15957504510879517, 0.41777434945106506, 0.835549533367157)), Vector((-0.15957504510879517, 0.41777434945106506, 0.835549533367157)), Vector((0.0, -0.15957650542259216, 0.9341723322868347)), Vector((-0.15957504510879517, -0.41777434945106506, 0.835549533367157)), Vector((0.15957504510879517, -0.41777434945106506, 0.835549533367157)), Vector((0.0, 0.15957650542259216, -0.9341723322868347)), Vector((-0.15957504510879517, 0.41777434945106506, -0.835549533367157)), Vector((0.15957504510879517, 0.41777434945106506, -0.835549533367157)), Vector((-0.15957504510879517, -0.41777434945106506, -0.835549533367157)), Vector((0.0, -0.15957650542259216, -0.9341723322868347)), Vector((0.15957504510879517, -0.41777434945106506, -0.835549533367157))]
    edges = []
    faces = [[59, 58, 54, 56, 4, 3, 39, 41, 9, 11], [5, 4, 56, 55, 15, 17, 27, 29, 24, 26], [36, 38, 40, 39, 3, 5, 26, 25, 1, 0], [45, 47, 16, 15, 55, 54, 58, 57, 22, 21], [17, 16, 47, 46, 43, 42, 12, 14, 28, 27], [25, 24, 29, 28, 14, 13, 50, 49, 2, 1], [34, 33, 30, 32, 6, 8, 53, 52, 19, 18], [13, 12, 42, 44, 20, 19, 52, 51, 48, 50], [35, 34, 18, 20, 44, 43, 46, 45, 21, 23], [7, 6, 32, 31, 10, 9, 41, 40, 38, 37], [57, 59, 11, 10, 31, 30, 33, 35, 23, 22], [0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11], [12, 13, 14], [15, 16, 17], [18, 19, 20], [21, 22, 23], [24, 25, 26], [27, 28, 29], [30, 31, 32], [33, 34, 35], [36, 37, 38], [39, 40, 41], [42, 43, 44], [45, 46, 47], [48, 49, 50], [51, 52, 53], [54, 55, 56], [57, 58, 59], [49, 48, 51, 53, 8, 7, 37, 36, 0, 2]]
    mesh = bpy.data.meshes.new(name="Truncated dodecahedron")
    mesh.from_pydata(verts, edges, faces)
    object_data_add(context, mesh, operator=self)

class CreateTruncatedDodecahedron(Operator, AddObjectHelper):
    
    bl_idname = "mesh.add_truncated_dodecahedron"
    bl_label = "Truncated dodecahedron"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):

        add_object_truncated_dodecahedron(self, context)
        
        return {'FINISHED'}     

#############################Усеченный Октаэдр
def add_object_truncated_octahedron(self, context):

    verts = [Vector((0.6666698455810547, 0.3333301246166229, 0.0)), Vector((0.6666698455810547, 0.0, 0.3333301246166229)), Vector((0.6666698455810547, -0.3333301246166229, 0.0)), Vector((0.6666698455810547, 0.0, -0.3333301246166229)), Vector((-0.6666698455810547, -0.3333301246166229, 0.0)), Vector((-0.6666698455810547, 0.0, 0.3333301246166229)), Vector((-0.6666698455810547, 0.3333301246166229, 0.0)), Vector((-0.6666698455810547, 0.0, -0.3333301246166229)), Vector((0.3333301246166229, 0.6666698455810547, 0.0)), Vector((0.0, 0.6666698455810547, -0.3333301246166229)), Vector((-0.3333301246166229, 0.6666698455810547, 0.0)), Vector((0.0, 0.6666698455810547, 0.3333301246166229)), Vector((0.0, -0.6666698455810547, -0.3333301246166229)), Vector((0.3333301246166229, -0.6666698455810547, 0.0)), Vector((0.0, -0.6666698455810547, 0.3333301246166229)), Vector((-0.3333301246166229, -0.6666698455810547, 0.0)), Vector((-0.3333301246166229, 0.0, 0.6666698455810547)), Vector((0.0, -0.3333301246166229, 0.6666698455810547)), Vector((0.3333301246166229, 0.0, 0.6666698455810547)), Vector((0.0, 0.3333301246166229, 0.6666698455810547)), Vector((-0.3333301246166229, 0.0, -0.6666698455810547)), Vector((0.0, 0.3333301246166229, -0.6666698455810547)), Vector((0.3333301246166229, 0.0, -0.6666698455810547)), Vector((0.0, -0.3333301246166229, -0.6666698455810547))]
    edges = []
    faces = [[17, 16, 5, 4, 15, 14], [20, 23, 12, 15, 4, 7], [21, 20, 7, 6, 10, 9], [23, 22, 3, 2, 13, 12], [18, 17, 14, 13, 2, 1], [16, 19, 11, 10, 6, 5], [19, 18, 1, 0, 8, 11], [0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15], [16, 17, 18, 19], [20, 21, 22, 23], [22, 21, 9, 8, 0, 3]]
    mesh = bpy.data.meshes.new(name="Truncated octahedron")
    mesh.from_pydata(verts, edges, faces)
    object_data_add(context, mesh, operator=self)

class CreateTruncatedOctahedron(Operator, AddObjectHelper):
    
    bl_idname = "mesh.add_truncated_octahedron"
    bl_label = "Truncated octahedron"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):

        add_object_truncated_octahedron(self, context)
        
        return {'FINISHED'}     
    
#############################Усеченный Тетраэдр
def add_object_truncated_tetrahedron(self, context):

    verts = [Vector((-0.1571355015039444, -0.2721666693687439, 0.555553674697876)), Vector((0.3142710030078888, 0.0, 0.555553674697876)), Vector((-0.1571355015039444, 0.2721666693687439, 0.555553674697876)), Vector((0.47140252590179443, -0.2721666991710663, -0.3333333432674408)), Vector((0.47140252590179443, 0.2721666991710663, -0.3333333432674408)), Vector((0.6285380125045776, 0.0, 0.11111295223236084)), Vector((-0.3142690062522888, 0.5443299412727356, 0.11111295223236084)), Vector((1.996755599975586e-06, 0.5443298816680908, -0.3333333432674408)), Vector((-0.4714045226573944, 0.2721632719039917, -0.3333333432674408)), Vector((-0.4714045226573944, -0.2721632719039917, -0.3333333432674408)), Vector((1.996755599975586e-06, -0.5443298816680908, -0.3333333432674408)), Vector((-0.3142690062522888, -0.5443299412727356, 0.11111295223236084))]
    edges = []
    faces = [[0, 2, 6, 8, 9, 11], [4, 3, 10, 9, 8, 7], [2, 1, 5, 4, 7, 6], [0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10, 11], [1, 0, 11, 10, 3, 5]]
    mesh = bpy.data.meshes.new(name="Truncated tetrahedron")
    mesh.from_pydata(verts, edges, faces)
    object_data_add(context, mesh, operator=self)

class CreateTruncatedTetrahedron(Operator, AddObjectHelper):
    
    bl_idname = "mesh.add_truncated_tetrahedron"
    bl_label = "Truncated tetrahedron"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):

        add_object_truncated_tetrahedron(self, context)
        
        return {'FINISHED'}     
    
#############################Курносый куб левый
def add_object_snub_cube_left(self, context):

    verts = [Vector((0.2955988049507141, 0.5436899662017822, 1.0)), Vector((0.5436899662017822, -0.2955988049507141, 1.0)), Vector((-0.5436899662017822, 0.2955988049507141, 1.0)), Vector((-0.2955988049507141, -0.5436899662017822, 1.0)), Vector((-0.2955988049507141, 0.5436899662017822, -1.0)), Vector((-0.5436899662017822, -0.2955988049507141, -1.0)), Vector((0.5436899662017822, 0.2955988049507141, -1.0)), Vector((0.2955988049507141, -0.5436899662017822, -1.0)), Vector((0.5436899662017822, -1.0, -0.2955988049507141)), Vector((-0.2955988049507141, -1.0, -0.5436899662017822)), Vector((0.2955988049507141, -1.0, 0.5436899662017822)), Vector((-0.5436899662017822, -1.0, 0.2955988049507141)), Vector((1.0, 0.5436899662017822, -0.2955988049507141)), Vector((1.0, -0.2955988049507141, -0.5436899662017822)), Vector((1.0, 0.2955988049507141, 0.5436899662017822)), Vector((1.0, -0.5436899662017822, 0.2955988049507141)), Vector((-0.5436899662017822, 1.0, -0.2955988049507141)), Vector((0.2955988049507141, 1.0, -0.5436899662017822)), Vector((-0.2955988049507141, 1.0, 0.5436899662017822)), Vector((0.5436899662017822, 1.0, 0.2955988049507141)), Vector((-1.0, -0.5436899662017822, -0.2955988049507141)), Vector((-1.0, 0.2955988049507141, -0.5436899662017822)), Vector((-1.0, -0.2955988049507141, 0.5436899662017822)), Vector((-1.0, 0.5436899662017822, 0.2955988049507141))]
    edges = []
    faces = [[0, 2, 3, 1], [4, 6, 7, 5], [8, 10, 11, 9], [12, 14, 15, 13], [16, 18, 19, 17], [20, 22, 23, 21], [10, 1, 3], [10, 15, 1], [15, 14, 1], [1, 14, 0], [14, 19, 0], [19, 18, 0], [0, 18, 2], [12, 19, 14], [19, 12, 17], [18, 23, 2], [16, 23, 18], [23, 22, 2], [2, 22, 3], [3, 22, 11], [11, 10, 3], [20, 11, 22], [21, 4, 5], [11, 20, 9], [8, 15, 10], [15, 8, 13], [21, 5, 20], [20, 5, 9], [5, 7, 9], [9, 7, 8], [8, 7, 13], [7, 6, 13], [13, 6, 12], [12, 6, 17], [6, 4, 17], [17, 4, 16], [4, 21, 16], [23, 16, 21]]
    mesh = bpy.data.meshes.new(name="Snub cube left option")
    mesh.from_pydata(verts, edges, faces)
    object_data_add(context, mesh, operator=self)

class CreateSnubCubeLeft(Operator, AddObjectHelper):
    
    bl_idname = "mesh.add_snub_cube_left"
    bl_label = "Left option"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):

        add_object_snub_cube_left(self, context)
        

        return {'FINISHED'}     
    
#############################Курносый куб Правый
def add_object_snub_cube_right(self, context):

    verts = [Vector((0.5436899662017822, 0.2955988049507141, 1.0)), Vector((0.2955988049507141, -0.5436899662017822, 1.0)), Vector((-0.2955988049507141, 0.5436899662017822, 1.0)), Vector((-0.5436899662017822, -0.2955988049507141, 1.0)), Vector((-0.5436899662017822, 0.2955988049507141, -1.0)), Vector((-0.2955988049507141, -0.5436899662017822, -1.0)), Vector((0.2955988049507141, 0.5436899662017822, -1.0)), Vector((0.5436899662017822, -0.2955988049507141, -1.0)), Vector((0.2955988049507141, -1.0, -0.5436899662017822)), Vector((-0.5436899662017822, -1.0, -0.2955988049507141)), Vector((0.5436899662017822, -1.0, 0.2955988049507141)), Vector((-0.2955988049507141, -1.0, 0.5436899662017822)), Vector((1.0, 0.2955988049507141, -0.5436899662017822)), Vector((1.0, -0.5436899662017822, -0.2955988049507141)), Vector((1.0, 0.5436899662017822, 0.2955988049507141)), Vector((1.0, -0.2955988049507141, 0.5436899662017822)), Vector((-0.2955988049507141, 1.0, -0.5436899662017822)), Vector((0.5436899662017822, 1.0, -0.2955988049507141)), Vector((-0.5436899662017822, 1.0, 0.2955988049507141)), Vector((0.2955988049507141, 1.0, 0.5436899662017822)), Vector((-1.0, -0.2955988049507141, -0.5436899662017822)), Vector((-1.0, 0.5436899662017822, -0.2955988049507141)), Vector((-1.0, -0.5436899662017822, 0.2955988049507141)), Vector((-1.0, 0.2955988049507141, 0.5436899662017822))]
    edges = []
    faces = [[0, 2, 3, 1], [4, 6, 7, 5], [8, 10, 11, 9], [12, 14, 15, 13], [16, 18, 19, 17], [20, 22, 23, 21], [23, 22, 3], [21, 23, 18], [16, 21, 18], [2, 23, 3], [0, 19, 2], [23, 2, 18], [19, 18, 2], [22, 11, 3], [1, 3, 11], [11, 10, 1], [15, 1, 10], [1, 15, 0], [15, 14, 0], [0, 14, 19], [12, 17, 14], [17, 19, 14], [4, 16, 6], [5, 20, 4], [21, 4, 20], [16, 4, 21], [20, 9, 22], [9, 11, 22], [20, 5, 9], [9, 5, 8], [5, 7, 8], [8, 13, 10], [13, 15, 10], [8, 7, 13], [6, 12, 7], [13, 7, 12], [12, 6, 17], [17, 6, 16]]
    mesh = bpy.data.meshes.new(name="Snub cube right option")
    mesh.from_pydata(verts, edges, faces)
    object_data_add(context, mesh, operator=self)

class CreateSnubCubeRight(Operator, AddObjectHelper):
    
    bl_idname = "mesh.add_snub_cube_right"
    bl_label = "Right option"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):

        add_object_snub_cube_right(self, context)
        
        return {'FINISHED'} 
